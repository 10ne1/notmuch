# Here's the (hopefully simple) versioning scheme.
#
# Releases of notmuch have a two-digit version (0.1, 0.2, etc.). We
# increment the second digit for each release and increment the first
# digit when we reach particularly major milestones of usability.
#
# Between releases, (such as when compiling notmuch from the git
# repository), we add a third digit, (0.1.1, 0.1.2, etc.), and
# increment it occasionally, (such as after a big batch of commits are
# merged.
NOTMUCH_VERSION=0.1

# Get settings from the output of configure by running it to generate
# Makefile.config if it doesn't exist yet. And add Makefile.config to
# our global dependency list.
include Makefile.config
global_deps += Makefile.config
Makefile.config: configure
	@echo ""
	@echo "Note: Calling ./configure with no command-line arguments. This is often fine,"
	@echo "      but if you want to specify any arguments (such as an alternate prefix"
	@echo "      into which to install), call ./configure explicitly and then make again."
	@echo "      See \"./configure --help\" for more details."
	@echo ""
	./configure

# Sub-directory Makefile.local fragments can append to these variables
# to have directory-specific cflags as necessary.
extra_cflags :=
extra_cxxflags :=

# Smash together user's values with our extra values
FINAL_CFLAGS = -DNOTMUCH_VERSION=$(NOTMUCH_VERSION) $(CFLAGS) $(WARN_CFLAGS) $(CONFIGURE_CFLAGS) $(extra_cflags)
FINAL_CXXFLAGS = $(CXXFLAGS) $(WARN_CXXFLAGS) $(CONFIGURE_CXXFLAGS) $(extra_cflags) $(extra_cxxflags)
FINAL_LDFLAGS = $(LDFLAGS) $(CONFIGURE_LDFLAGS)

all: notmuch notmuch-shared notmuch.1.gz
ifeq ($(MAKECMDGOALS),)
ifeq ($(shell cat .first-build-message),)
	@NOTMUCH_FIRST_BUILD=1 $(MAKE) --no-print-directory all
	@echo ""
	@echo "Compilation of notmuch is now complete. You can install notmuch with:"
	@echo ""
	@echo "	make install"
	@echo ""
	@echo "Note that depending on the prefix to which you are installing"
	@echo "you may need root permission (such as \"sudo make install\")."
	@echo "See \"./configure --help\" for help on setting an alternate prefix."
	@echo Printed > .first-build-message
endif
endif

# The user has not set any verbosity, default to quiet mode and inform the
# user how to enable verbose compiles.
ifeq ($(V),)
quiet_DOC := "Use \"$(MAKE) V=1\" to see the verbose compile lines.\n"
quiet = @printf $(quiet_DOC)$(eval quiet_DOC:=)"  %12s $@\n" "$1 $2"; $($1)
quiet_args = @printf $(quiet_DOC)$(eval quiet_DOC:=)"  %12s$2\n" $1; $($1) $2
endif
# The user has explicitly enabled quiet compilation.
ifeq ($(V),0)
quiet = @printf "  %12s $@\n" "$1 $2"; $($1)
quiet_args = @printf "  %12s$2\n" $1; $($1) $2
endif
# Otherwise, print the full command line.
quiet ?= $($1)
quiet_args ?= $($1) $2

quiet_mkdir = $(call quiet_args,MKDIR,$1)
quiet_install_bin = $(call quiet_args,INSTALL-BIN,$1)
quiet_install_data = $(call quiet_args,INSTALL-DATA,$1)
quiet_symlink = $(call quiet_args,SYMLINK,$1)

%.o: %.cc $(global_deps)
	$(call quiet,CXX,$(CXXFLAGS)) -c $(FINAL_CXXFLAGS) $< -o $@

%.o: %.c $(global_deps)
	$(call quiet,CC,$(CFLAGS)) -c $(FINAL_CFLAGS) $< -o $@

%.elc: %.el
	$(call quiet,EMACS) --directory emacs -batch -f batch-byte-compile $<

.deps/%.d: %.c $(global_deps)
	@set -e; rm -f $@; mkdir -p $$(dirname $@) ; \
	$(CC) -M $(CPPFLAGS) $(FINAL_CFLAGS) $< > $@.$$$$ 2>/dev/null ; \
	sed 's,'$$(basename $*)'\.o[ :]*,$*.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$

.deps/%.d: %.cc $(global_deps)
	@set -e; rm -f $@; mkdir -p $$(dirname $@) ; \
	$(CXX) -M $(CPPFLAGS) $(FINAL_CXXFLAGS) $< > $@.$$$$ 2>/dev/null ; \
	sed 's,'$$(basename $*)'\.o[ :]*,$*.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$

DEPS := $(SRCS:%.c=.deps/%.d)
DEPS := $(DEPS:%.cc=.deps/%.d)
-include $(DEPS)

.PHONY : clean
clean:
	rm -f $(CLEAN); rm -rf .deps

notmuch_client_srcs =		\
	$(notmuch_compat_srcs)	\
	debugger.c		\
	gmime-filter-reply.c	\
	notmuch.c		\
	notmuch-config.c	\
	notmuch-count.c		\
	notmuch-dump.c		\
	notmuch-new.c		\
	notmuch-reply.c		\
	notmuch-restore.c	\
	notmuch-search.c	\
	notmuch-search-tags.c   \
	notmuch-setup.c		\
	notmuch-show.c		\
	notmuch-tag.c		\
	notmuch-time.c		\
	query-string.c		\
	show-message.c		\
	json.c

notmuch_client_modules = $(notmuch_client_srcs:.c=.o)

notmuch: $(notmuch_client_modules) lib/libnotmuch.a
	$(call quiet,CC,$(LDFLAGS)) $^ $(FINAL_LDFLAGS) -o $@

notmuch-shared: $(notmuch_client_modules) lib/libnotmuch.so
	$(call quiet,CC,$(LDFLAGS)) -Llib -lnotmuch $(notmuch_client_modules) $(FINAL_LDFLAGS) -o $@

notmuch.1.gz: notmuch.1
	$(call quiet,gzip) --stdout $^ > $@

install: all notmuch.1.gz
	$(call quiet_mkdir, $(DESTDIR)$(prefix)/bin/)
	$(call quiet_mkdir, $(DESTDIR)$(libdir)/)
	$(call quiet_mkdir, $(DESTDIR)$(prefix)/include/)
	$(call quiet_mkdir, $(DESTDIR)$(prefix)/share/man/man1)
	$(call quiet_install_bin, notmuch-shared $(DESTDIR)$(prefix)/bin/notmuch)
	$(call quiet_install_data, notmuch.1.gz $(DESTDIR)$(prefix)/share/man/man1/)
ifeq ($(MAKECMDGOALS), install)
	@echo ""
	@echo "Notmuch is now installed."
	@echo ""
	@echo "You may now want to install additional components to support using notmuch"
	@echo "together with other software packages:"
	@echo ""
	@echo "	make install-emacs"
	@echo "	make install-bash"
	@echo "	make install-zsh"
	@echo ""
endif

install-desktop:
	$(call quiet,MKDIR) $(DESTDIR)$(desktop_dir)
	desktop-file-install --mode 0644 --dir $(DESTDIR)$(desktop_dir) notmuch.desktop

install-bash:
	$(call quiet-mkdir, $(DESTDIR)$(bash_completion_dir))
	$(call quiet_install_data, contrib/notmuch-completion.bash $(DESTDIR)$(bash_completion_dir)/notmuch)

install-zsh:
	$(call quiet_mkdir, $(DESTDIR)$(zsh_completion_dir))
	$(call quiet_install_data, contrib/notmuch-completion.zsh $(DESTDIR)$(zsh_completion_dir)/notmuch)

SRCS  := $(SRCS) $(notmuch_client_srcs)
CLEAN := $(CLEAN) notmuch notmuch-shared $(notmuch_client_modules) notmuch.elc notmuch.1.gz

# -*- makefile -*-

# Here's the (hopefully simple) versioning scheme.
#
# Releases of notmuch have a two-digit version (0.1, 0.2, etc.). We
# increment the second digit for each release and increment the first
# digit when we reach particularly major milestones of usability.
#
# Between releases, (such as when compiling notmuch from the git
# repository), we let git append identification of the actual commit.
PACKAGE=notmuch

VERSION:=$(shell cat version)
ifneq ($(MAKECMDGOALS),release)
ifneq ($(MAKECMDGOALS),release-message)
VERSION:=$(shell if git describe > /dev/null 2>&1; then git describe --match '[0-9.]*'; else cat version; fi)
endif
endif

RELEASE_HOST=notmuchmail.org
RELEASE_DIR=/srv/notmuchmail.org/www/releases
RELEASE_URL=http://notmuchmail.org/releases
TAR_FILE=$(PACKAGE)-$(VERSION).tar.gz
SHA1_FILE=$(TAR_FILE).sha1
GPG_FILE=$(SHA1_FILE).asc

# Smash together user's values with our extra values
FINAL_CFLAGS = -DNOTMUCH_VERSION=$(VERSION) $(CFLAGS) $(WARN_CFLAGS) $(CONFIGURE_CFLAGS) $(extra_cflags)
FINAL_CXXFLAGS = $(CXXFLAGS) $(WARN_CXXFLAGS) $(CONFIGURE_CXXFLAGS) $(extra_cflags) $(extra_cxxflags)
FINAL_NOTMUCH_LDFLAGS = $(LDFLAGS) -Llib -lnotmuch
ifneq ($(LINKER_RESOLVES_LIBRARY_DEPENDENCIES),1)
FINAL_NOTMUCH_LDFLAGS += $(CONFIGURE_LDFLAGS)
endif
FINAL_LIBNOTMUCH_LDFLAGS = $(LDFLAGS) $(CONFIGURE_LDFLAGS)

.PHONY: all
all: notmuch notmuch-shared notmuch.1.gz
ifeq ($(MAKECMDGOALS),)
ifeq ($(shell cat .first-build-message),)
	@NOTMUCH_FIRST_BUILD=1 $(MAKE) --no-print-directory all
	@echo ""
	@echo "Compilation of notmuch is now complete. You can install notmuch with:"
	@echo ""
	@echo "	make install"
	@echo ""
	@echo "Note that depending on the prefix to which you are installing"
	@echo "you may need root permission (such as \"sudo make install\")."
	@echo "See \"./configure --help\" for help on setting an alternate prefix."
	@echo Printed > .first-build-message
endif
endif

.PHONY: test
test: all
	@./test/notmuch-test

$(TAR_FILE):
	git archive --format=tar --prefix=$(PACKAGE)-$(VERSION)/ HEAD > $(TAR_FILE).tmp
	echo $(VERSION) > version.tmp
	tar --append -f $(TAR_FILE).tmp --transform s_^_$(PACKAGE)-$(VERSION)/_  --transform 's_.tmp$$__' version.tmp
	rm version.tmp
	gzip < $(TAR_FILE).tmp > $(TAR_FILE)

.PHONY: snapshot
snapshot: $(TAR_FILE)
	@echo "Snapshot created as $(TAR_FILE)"

$(SHA1_FILE): $(TAR_FILE)
	sha1sum $^ > $@

$(GPG_FILE): $(SHA1_FILE)
	@echo "Please enter your GPG password to sign the checksum."
	gpg --armor --sign $^ 

.PHONY: dist
dist: $(TAR_FILE)

# We invoke make recursively only to force ordering of our phony
# targets in the case of parallel invocation of make (-j).
#
# We carefully ensure that our VERSION variable is passed down to any
# sub-ordinate make invocations (which won't otherwhise know that they
# are part of the release and need to take the version from the
# version file).
.PHONY: release
release: verify-no-dirty-code
	$(MAKE) VERSION=$(VERSION) verify-newer
	$(MAKE) VERSION=$(VERSION) test
	$(MAKE) VERSION=$(VERSION) $(GPG_FILE)
	scp $(TAR_FILE) $(SHA1_FILE) $(GPG_FILE) $(RELEASE_HOST):$(RELEASE_DIR)
	ssh $(RELEASE_HOST) "rm -f $(RELEASE_DIR)/LATEST-$(PACKAGE)-[0-9]* && ln -s $(TAR_FILE) $(RELEASE_DIR)/LATEST-$(PACKAGE)-$(VERSION)"
	mkdir -p releases
	mv $(TAR_FILE) $(SHA1_FILE) $(GPG_FILE) releases
	git tag -s -m "$(PACKAGE) $(VERSION) release" $(VERSION)
	git push origin $(VERSION)
	$(MAKE) VERSION=$(VERSION) release-message > $(PACKAGE)-$(VERSION).announce
	@echo "Please send a release announcement using $(PACKAGE)-$(VERSION).announce as a template."

.PHONY: release-message
release-message:
	@echo "To: notmuch@notmuchmail.org"
	@echo "Subject: $(PACKAGE) release $(VERSION) now available"
	@echo ""
	@echo "Where to obtain notmuch $(VERSION)"
	@echo "==========================="
	@echo "  $(RELEASE_URL)/$(TAR_FILE)"
	@echo ""
	@echo "Which can be verified with:"
	@echo ""
	@echo "  $(RELEASE_URL)/$(SHA1_FILE)"
	@echo -n "  "
	@cat releases/$(SHA1_FILE)
	@echo ""
	@echo "  $(RELEASE_URL)/$(GPG_FILE)"
	@echo "  (signed by `getent passwd "$$USER" | cut -d: -f 5 | cut -d, -f 1`)"
	@echo ""
	@echo "What's new in notmuch $(VERSION)"
	@echo "========================="
	@sed -ne '/^[Nn]otmuch $(VERSION)/{n;n;b NEWS}; d; :NEWS /^===/q; {p;n;b NEWS}' < NEWS | head -n -2
	@echo ""
	@echo "What is notmuch"
	@echo "==============="
	@echo "Notmuch is a system for indexing, searching, reading, and tagging"
	@echo "large collections of email messages in maildir or mh format. It uses"
	@echo "the Xapian library to provide fast, full-text search with a convenient"
	@echo "search syntax."
	@echo ""
	@echo "For more about notmuch, see http://notmuchmail.org"

.PHONY: verify-no-dirty-code
verify-no-dirty-code: verify-version
	@printf "Checking that source tree is clean..."
ifneq ($(shell git ls-files -m),)
	@echo "No"
	@echo "The following files have been modified since the most recent git commit:"
	@echo ""
	@git ls-files -m
	@echo ""
	@echo "The release will be made from the committed state, but perhaps you meant"
	@echo "to commit this code first? Please clean this up to make it more clear."
	@false
else
	@echo "Good"
endif

.PHONY: verify-version
verify-version:
	@echo -n "Checking that $(VERSION) consists only of digits and periods..."
	@if echo $(VERSION) | grep -q -v -x '[0-9.]*'; then \
		(echo "No." && \
	         echo "Please follow the instructions in RELEASING to choose a version" && false) \
	 else :; fi
	@echo "Good."

.PHONY: verify-newer
verify-newer:
	@echo -n "Checking that no $(VERSION) release already exists..."
	@ssh $(RELEASE_HOST) test ! -e $(RELEASE_DIR)/$(TAR_FILE) \
		|| (echo "Ouch." && echo "Found: $(RELEASE_HOST):$(RELEASE_DIR)/$(TAR_FILE)" \
		&& echo "Refusing to replace an existing release." \
		&& echo "Don't forget to update \"version\" as described in RELEASING before release." && false)
	@echo "Good."

# The user has not set any verbosity, default to quiet mode and inform the
# user how to enable verbose compiles.
ifeq ($(V),)
quiet_DOC := "Use \"$(MAKE) V=1\" to see the verbose compile lines.\n"
quiet = @printf $(quiet_DOC)$(eval quiet_DOC:=)"$1 $@\n"; $($(shell echo $1 | sed -e s'/ .*//'))
endif
# The user has explicitly enabled quiet compilation.
ifeq ($(V),0)
quiet = @printf "$1 $@\n"; $($(shell echo $1 | sed -e s'/ .*//'))
endif
# Otherwise, print the full command line.
quiet ?= $($(shell echo $1 | sed -e s'/ .*//'))

%.o: %.cc $(global_deps)
	$(call quiet,CXX $(CXXFLAGS)) -c $(FINAL_CXXFLAGS) $< -o $@

%.o: %.c $(global_deps)
	$(call quiet,CC $(CFLAGS)) -c $(FINAL_CFLAGS) $< -o $@

.deps/%.d: %.c $(global_deps)
	@set -e; rm -f $@; mkdir -p $$(dirname $@) ; \
	$(CC) -M $(CPPFLAGS) $(FINAL_CFLAGS) $< > $@.$$$$ 2>/dev/null ; \
	sed 's,'$$(basename $*)'\.o[ :]*,$*.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$

.deps/%.d: %.cc $(global_deps)
	@set -e; rm -f $@; mkdir -p $$(dirname $@) ; \
	$(CXX) -M $(CPPFLAGS) $(FINAL_CXXFLAGS) $< > $@.$$$$ 2>/dev/null ; \
	sed 's,'$$(basename $*)'\.o[ :]*,$*.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$

DEPS := $(SRCS:%.c=.deps/%.d)
DEPS := $(DEPS:%.cc=.deps/%.d)
-include $(DEPS)

.PHONY : clean
clean:
	rm -f $(CLEAN); rm -rf .deps

# We don't (yet) have any distributed files not in the upstream repository.
# So distclean is currently identical to clean.
.PHONY: distclean
distclean: clean

notmuch_client_srcs =		\
	debugger.c		\
	gmime-filter-reply.c	\
	gmime-filter-headers.c	\
	notmuch.c		\
	notmuch-config.c	\
	notmuch-count.c		\
	notmuch-dump.c		\
	notmuch-new.c		\
	notmuch-reply.c		\
	notmuch-restore.c	\
	notmuch-search.c	\
	notmuch-search-tags.c   \
	notmuch-setup.c		\
	notmuch-show.c		\
	notmuch-tag.c		\
	notmuch-time.c		\
	query-string.c		\
	show-message.c		\
	json.c

notmuch_client_modules = $(notmuch_client_srcs:.c=.o)

notmuch: $(notmuch_client_modules) lib/libnotmuch.a
	$(call quiet,CXX $(CFLAGS)) $^ $(FINAL_LIBNOTMUCH_LDFLAGS) -o $@

notmuch-shared: $(notmuch_client_modules) lib/$(LINKER_NAME)
	$(call quiet,CXX $(CFLAGS)) $(notmuch_client_modules) $(FINAL_NOTMUCH_LDFLAGS) -o $@

notmuch.1.gz: notmuch.1
	gzip --stdout $^ > $@

.PHONY: install
install: all notmuch.1.gz
	mkdir -p $(DESTDIR)$(mandir)/man1
	install -m0644 notmuch.1.gz $(DESTDIR)$(mandir)/man1/
	mkdir -p $(DESTDIR)$(prefix)/bin/
	install notmuch-shared $(DESTDIR)$(prefix)/bin/notmuch
ifeq ($(MAKECMDGOALS), install)
	@echo ""
	@echo "Notmuch is now installed to $(DESTDIR)$(prefix)"
	@echo ""
	@echo "To run notmuch from emacs, each user should add the following line to ~/.emacs:"
	@echo ""
	@echo "	(require 'notmuch)"
	@echo ""
	@echo "And should then run \"M-x notmuch\" from within emacs or run \"emacs -f notmuch\""
endif

.PHONY: install-desktop
install-desktop:
	mkdir -p $(DESTDIR)$(desktop_dir)
	desktop-file-install --mode 0644 --dir $(DESTDIR)$(desktop_dir) notmuch.desktop

SRCS  := $(SRCS) $(notmuch_client_srcs)
CLEAN := $(CLEAN) notmuch notmuch-shared $(notmuch_client_modules) notmuch.elc notmuch.1.gz
